
dims.h,146
# define DIMS_H2,15
typedef enum dim 7,190
  dim_x,8,209
  dim_y,9,218
  num_dims10,227
} dim_t;11,238
typedef int8_t pair_t[pair_t13,248

dungeon.c,1660
#define DUMP_HARDNESS_IMAGES 17,285
typedef struct corridor_path 19,317
  heap_node_t *hn;hn20,348
  uint8_t pos[pos21,367
  uint8_t from[from22,385
  int32_t cost;23,404
} corridor_path_t;24,420
static uint32_t adjacent_to_room(44,837
static uint32_t is_open_space(52,1098
static int32_t corridor_path_cmp(57,1197
static void dijkstra_corridor(61,1347
static void dijkstra_corridor_inv(160,5084
#define hardnesspair_inv(213,6406
static int connect_two_rooms(263,9077
static int create_cycle(282,9729
static int connect_rooms(324,11294
int gaussian[gaussian337,11487
typedef struct queue_node 345,11643
  int x,346,11671
  int x, y;346,11671
  struct queue_node *next;next347,11683
} queue_node_t;348,11710
static int smooth_hardness(350,11727
static int empty_dungeon(509,15998
static int place_rooms(528,16374
static void place_stairs(565,17561
static int make_rooms(587,18196
int gen_dungeon(610,18759
void render_dungeon(623,18921
void delete_dungeon(669,20010
void init_dungeon(674,20067
void init_characters(679,20124
int write_dungeon_map(722,21335
int write_rooms(735,21564
uint16_t count_up_stairs(757,22036
uint16_t count_down_stairs(773,22287
int write_stairs(789,22542
uint32_t calculate_dungeon_size(821,23297
int write_dungeon(832,23768
int read_dungeon_map(898,25331
int read_stairs(921,25929
int read_rooms(944,26406
int read_dungeon(1002,28332
int read_pgm(1083,30217
void render_hardness_map(1168,32620
void render_movement_cost_map(1191,33147
void render_distance_map(1213,33660
void render_tunnel_distance_map(1252,34702
void update_dungeon(1291,35747
int32_t character_cmp(1306,35812

dungeon.h,1584
# define DUNGEON_H2,18
#define DUNGEON_X 7,77
#define DUNGEON_Y 8,111
#define MIN_ROOMS 9,145
#define MAX_ROOMS 10,178
#define ROOM_MIN_X 11,212
#define ROOM_MIN_Y 12,245
#define ROOM_MAX_X 13,278
#define ROOM_MAX_Y 14,312
#define SAVE_DIR 15,346
#define DUNGEON_SAVE_FILE 16,387
#define DUNGEON_SAVE_SEMANTIC 17,428
#define DUNGEON_SAVE_VERSION 18,474
#define mappair(20,509
#define mapxy(21,566
#define hardnesspair(22,601
#define hardnessxy(23,668
typedef enum __attribute__ ((__packed__)) terrain_type 25,714
  ter_debug,26,771
  ter_wall,27,784
  ter_wall_immutable,28,796
  ter_floor,29,818
  ter_floor_room,30,831
  ter_floor_hall,31,849
  ter_stairs,32,867
  ter_stairs_up,33,881
  ter_stairs_down34,898
} terrain_type_t;35,916
typedef struct room 37,935
  pair_t position;38,957
  pair_t size;39,976
} room_t;40,991
typedef struct pc 42,1002
} pc_t;44,1025
typedef struct monster 46,1034
	int id;47,1059
} monster_t;48,1068
typedef struct character 50,1082
	pair_t position;51,1109
	heap_node_t *hn;hn52,1127
	uint8_t speed;53,1145
	uint8_t next_turn;54,1161
	uint8_t is_alive;55,1181
	uint8_t is_player;57,1202
		pc_t pc;59,1231
		monster_t monster;60,1242
} character_t;62,1267
typedef struct dungeon 64,1283
  uint32_t num_rooms;65,1308
  room_t *rooms;rooms66,1330
  terrain_type_t map[map67,1347
  uint8_t hardness[hardness76,2000
  uint8_t pc_distance[pc_distance77,2042
  uint8_t pc_tunnel[pc_tunnel78,2087
	character_t *character_map[character_map80,2132
	character_t player;81,2183
} dungeon_t;83,2205

heap.c,1020
struct heap_node 8,99
  heap_node_t *next;next9,118
  heap_node_t *prev;prev10,139
  heap_node_t *parent;parent11,160
  heap_node_t *child;child12,183
  void *datum;datum13,205
  uint32_t degree;14,220
  uint32_t mark;15,239
#define swap(18,260
#define splice_heap_node_lists(24,372
#define insert_heap_node_in_list(33,684
#define remove_heap_node_from_list(40,908
void print_heap_node(45,1041
void print_heap(61,1363
void print_heap_node_list(78,1665
void heap_init(94,1864
void heap_node_delete(104,2100
void heap_delete(122,2404
heap_node_t *heap_insert(heap_insert133,2569
void *heap_peek_min(heap_peek_min153,2895
static void heap_link(158,2971
static void heap_consolidate(172,3293
void *heap_remove_min(heap_remove_min213,4226
int heap_combine(248,4760
static void heap_cut(277,5411
static void heap_cascading_cut(291,5692
int heap_decrease_key(305,5918
int heap_decrease_key_no_replace(319,6160
int32_t compare(343,6734
char *print_int(print_int348,6833
int main(357,6951

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

path.c,302
static dungeon_t *dungeon;dungeon15,673
typedef struct path 17,701
  heap_node_t *hn;hn18,723
  uint8_t pos[pos19,742
} path_t;20,760
static int32_t dist_cmp(22,771
static int32_t tunnel_cmp(29,1125
void dijkstra(36,1473
#define tunnel_movement_cost(146,5973
void dijkstra_tunnel(149,6065

path.h,93
# define PATH_H2,15
# define HARDNESS_PER_TURN 4,32
typedef struct dungeon dungeon_t;6,63

rlg327.c,36
void usage(10,142
int main(20,352

utils.c,25
int makedirectory(9,124

utils.h,123
# define UTILS_H2,16
# define rand_under(6,147
# define rand_range(10,290
#define malloc(12,364
#define UNUSED(18,508
